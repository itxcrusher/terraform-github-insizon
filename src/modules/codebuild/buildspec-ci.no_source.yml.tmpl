version: 0.2

# use when no source is configured and cloning the repo manually via pat

env:
  variables:
    TF_PLUGIN_CACHE_DIR: "/root/.terraform.d/plugin-cache"
    TF_VERSION: "1.7.5"

cache:
  paths:
    - /root/.terraform.d/plugin-cache/**/*
    - repo/.terraform/**/*
    - repo/.terraform.lock.hcl
    - /root/.cache/pip/**/*

phases:
  install:
    commands:
      - mkdir -p "$TF_PLUGIN_CACHE_DIR"
      - if ! command -v git >/dev/null 2>&1; then apt-get update && apt-get install -y git unzip; fi
      - if ! command -v aws >/dev/null 2>&1; then apt-get update && apt-get install -y awscli; fi
      - git --version || (yum install -y git || (apt-get update && apt-get install -y git))
      - echo "Cloning repo with token (masked by CodeBuild)"
      - git clone "https://x-access-token:$${TF_VAR_github_token}@${repo_host_path}" repo
      - cd repo
      - chmod +x shell/*.sh || true
      - echo "Installing Terraform"
      - curl -fsSL https://releases.hashicorp.com/terraform/$${TF_VERSION}/terraform_$${TF_VERSION}_linux_amd64.zip -o tf.zip
      - unzip -o tf.zip -d /usr/local/bin && rm tf.zip
      - terraform -version
      - aws --version || pip3 install awscli --break-system-packages || pip install awscli

  pre_build:
    commands:
      - echo "ENV=$ENV APPLY=$APPLY"
      - echo "Formatting (non-blocking)"; bash shell/fmt.sh || true

  build:
    commands:
      - echo "Planning via shell/plan.sh"
      - bash shell/plan.sh "$ENV"

  post_build:
    commands:
      - |
        if [ "$APPLY" = "true" ]; then
          echo "Applying via shell/apply.sh"
          bash shell/apply.sh "$ENV"
        else
          echo "Skipping apply (APPLY=$APPLY)"
        fi
